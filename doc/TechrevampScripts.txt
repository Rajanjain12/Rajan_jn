
CREATE TABLE GUESTMARKETINGPREFERENCES
  AS (SELECT * FROM GUESTPREFERENCES);
ALTER TABLE `KyobeeTechRevamp`.`GUESTMARKETINGPREFERENCES` 
ADD INDEX `FK1_GUESTID_idx` (`GUEST_ID` ASC);
;
ALTER TABLE `KyobeeTechRevamp`.`GUESTMARKETINGPREFERENCES` 
ADD CONSTRAINT `FK1_GUESTID`
  FOREIGN KEY (`GUEST_ID`)
  REFERENCES `KyobeeTechRevamp`.`GUEST` (`guestID`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;
  
  ALTER TABLE `KyobeeTechRevamp`.`GUESTMARKETINGPREFERENCES` 
CHANGE COLUMN `GUEST_PREF_ID` `GUEST_MARKETING_PREF_ID` INT(11) NOT NULL DEFAULT '0' ;

ALTER TABLE `KyobeeTechRevamp`.`GUESTMARKETINGPREFERENCES` 
CHANGE COLUMN `GUEST_MARKETING_PREF_ID` `GUEST_MARKETING_PREF_ID` INT(11) NOT NULL AUTO_INCREMENT ,
CHANGE COLUMN `PREF_ID` `PREF_ID` INT(11) NOT NULL ,
ADD PRIMARY KEY (`GUEST_MARKETING_PREF_ID`);
;
ALTER TABLE `KyobeeTechRevamp`.`GUEST` 
CHANGE COLUMN `noOfPeople` `noOfPeople` INT(11) NULL DEFAULT NULL ;

UPDATE `KyobeeTechRevamp`.`LANGUAGEKEYMAPPING` SET `ScreenName` = 'seatingOrMarketingPref' WHERE (`LanguageKeyMappingId` = '15');
UPDATE `KyobeeTechRevamp`.`LANGUAGEKEYMAPPING` SET `ScreenName` = 'seatingOrMarketingPref' WHERE (`LanguageKeyMappingId` = '16');
UPDATE `KyobeeTechRevamp`.`LANGUAGEKEYMAPPING` SET `ScreenName` = 'seatingOrMarketingPref' WHERE (`LanguageKeyMappingId` = '19');
UPDATE `KyobeeTechRevamp`.`LANGUAGEKEYMAPPING` SET `ScreenName` = 'seatingOrMarketingPref' WHERE (`LanguageKeyMappingId` = '22');
UPDATE `KyobeeTechRevamp`.`LANGUAGEKEYMAPPING` SET `ScreenName` = 'seatingOrMarketingPref' WHERE (`LanguageKeyMappingId` = '24');
UPDATE `KyobeeTechRevamp`.`LANGUAGEKEYMAPPING` SET `ScreenName` = 'seatingOrMarketingPref' WHERE (`LanguageKeyMappingId` = '25');
UPDATE `KyobeeTechRevamp`.`LANGUAGEKEYMAPPING` SET `ScreenName` = 'seatingOrMarketingPref' WHERE (`LanguageKeyMappingId` = '26');
UPDATE `KyobeeTechRevamp`.`LANGUAGEKEYMAPPING` SET `ScreenName` = 'seatingOrMarketingPref' WHERE (`LanguageKeyMappingId` = '17');
UPDATE `KyobeeTechRevamp`.`LANGUAGEKEYMAPPING` SET `ScreenName` = 'seatingOrMarketingPref' WHERE (`LanguageKeyMappingId` = '18');

ALTER TABLE `KyobeeTechRevamp`.`SMSLOG` 
CHANGE COLUMN `PhoneNo` `PhoneNo` INT NULL DEFAULT NULL ;

ALTER TABLE `KyobeeTechRevamp`.`GUEST` 
CHANGE COLUMN `sms` `contactNo` INT NULL DEFAULT NULL ;

USE `KyobeeTechRevamp`;
DROP procedure IF EXISTS `UPDATEGUESTREVAMP`;

DELIMITER $$
USE `KyobeeTechRevamp`$$
CREATE DEFINER=`root`@`%` PROCEDURE `UPDATEGUESTREVAMP`(IN `P_ORGID` INT, IN `P_GUESTID` INT, IN `P_GUESTNAME` VARCHAR(255) CHARACTER SET utf8, IN `P_NOOFCHILDREN` INT, IN `P_NOOFADULTS` INT, IN `P_NOOFINFANTS` INT, IN `P_NOOFPEOPLE` INT, IN `P_LANGUAGEPREFID` INT, IN `P_PARTYTYPE` INT, IN `P_DEVICETYPE` VARCHAR(255), 
 IN `P_DEVICEID` VARCHAR(255) , IN `P_CONTACTNO` INT, IN `P_EMAIL` VARCHAR(255), IN `P_PREFTYPE` VARCHAR(15), IN `P_OPTIN` INT, IN `P_CSVSEATINGPREF` VARCHAR(255), IN `P_NOTE` VARCHAR(255) CHARACTER SET utf8, OUT `OP_NOWSERVERINGPARTY` INT, OUT `OP_TOTALWAITINGGUEST` INT, OUT `OP_TOTALWAITTIME` INT, OUT `OP_NOOFPARTIESAHEAD` INT, OUT `OP_GUESTTOBENOTIFIED` INT, OUT `OP_GUESTNOTIFIEDWAITTIME` INT, OUT `OP_CLIENTBASE` VARCHAR(50))
BEGIN

UPDATE GUEST 
SET 
    name = P_GUESTNAME,
    noOfChildren = P_NOOFCHILDREN,
    noOfAdults = P_NOOFADULTS,
    noOfInfants = P_NOOFINFANTS,
    noOfPeople = P_NOOFPEOPLE,
    languagePrefID = P_LANGUAGEPREFID,
    partyType = P_PARTYTYPE,
	contactNo= P_CONTACTNO,
    email = P_EMAIL,
    prefType = P_PREFTYPE,
    optin = P_OPTIN,
    seatingPreference = P_CSVSEATINGPREF,
    status = 'CHECKIN',
    note = P_NOTE,
    updatedTime = NOW()
WHERE
    GUESTID = P_GUESTID;



-- Call the Procedure to get the header metrics calcualted
CALL `CALCHEADERMETRICS`(P_ORGID, @OP_NOWSERVERINGPARTY, @OP_TOTALWAITINGGUEST, @OP_TOTALWAITTIME , @OP_NOOFPARTIESAHEAD, @OP_GUESTTOBENOTIFIED, @OP_GUESTNOTIFIEDWAITTIME,@OP_PERPARTYWAITTIME, @OP_NOTIFYUSERCOUNT,@OP_CLIENTBASE);
  
-- Already that particular guest has received notification
IF(row_count() = 0) THEN
    SET OP_GUESTTOBENOTIFIED := -1;
ELSE
 SELECT @OP_GUESTTOBENOTIFIED INTO  OP_GUESTTOBENOTIFIED;    
END IF;   


-- Set Return Variables
SELECT @OP_NOWSERVERINGPARTY INTO  OP_NOWSERVERINGPARTY;
SELECT @OP_TOTALWAITTIME INTO  OP_TOTALWAITTIME;
SELECT @OP_NOOFPARTIESAHEAD INTO  OP_NOOFPARTIESAHEAD;
SELECT @OP_TOTALWAITINGGUEST INTO OP_TOTALWAITINGGUEST;
SELECT @OP_GUESTNOTIFIEDWAITTIME INTO OP_GUESTNOTIFIEDWAITTIME;
SELECT @OP_CLIENTBASE INTO OP_CLIENTBASE;
 
END$$

DELIMITER ;

USE `KyobeeTechRevamp`;
DROP procedure IF EXISTS `ADDGUESTLATEST`;

DELIMITER $$
USE `KyobeeTechRevamp`$$
CREATE DEFINER=`root`@`%` PROCEDURE `ADDGUESTLATEST`(IN `P_ORGID` INT, IN `P_GUESTNAME` VARCHAR(255) CHARACTER SET utf8, IN `P_UUID` VARCHAR(255),IN P_NOOFCHILDREN INT,IN P_NOOFADULTS INT,IN P_NOOFINFANTS INT, IN `P_NOOFPEOPLE` INT, IN `P_LANGUAGEPREFID` INT, IN `P_PARTYTYPE` INT, IN `P_DEVICETYPE` VARCHAR(255), IN `P_DEVICEID` VARCHAR(255), IN `P_CONTACTNO` INT, IN `P_EMAIL` VARCHAR(255), IN `P_PREFTYPE` VARCHAR(15), IN `P_OPTIN` INT, IN `P_NOTE` VARCHAR(255) CHARACTER SET utf8,IN `P_CSVMARKETINGPREF` VARCHAR(255), IN `P_CSVSEATINGPREF` VARCHAR(255), OUT `OP_GUESTID` INT, OUT `OP_GUESTRANK` INT, OUT `OP_NOWSERVERINGPARTY` INT, OUT `OP_TOTALWAITINGGUEST` INT, OUT `OP_TOTALWAITTIME` INT, OUT `OP_NOOFPARTIESAHEAD` INT, OUT `OP_GUESTTOBENOTIFIED` INT, OUT `OP_CLIENTBASE` VARCHAR(50))
BEGIN

DECLARE V_RANK , V_TOTAL_GUEST , V_NOTIFYUSERCOUNT INT;
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' set V_RANK=1;

-- Lock entire Table 
SELECT * FROM GUEST WHERE ORGANIZATIONID = P_ORGID FOR UPDATE;
 
-- Finding the MAX Rank from the Guest Table for the given Organization
SELECT 
    MAX(RANK)
INTO V_RANK FROM
    GUEST
WHERE
    ORGANIZATIONID = P_ORGID;

-- If RANK is NULL set it to 1
IF V_RANK IS NULL THEN
  SET V_RANK = 1;
ELSE
  SET V_RANK = V_RANK +1;  
END IF;
    

-- Insert record into the GUEST Table
INSERT INTO GUEST 
(OrganizationID, name, uuid,noOfChildren,noOfAdults,noOfInfants,noOfPeople, languagePrefID , partyType, deviceType, deviceId,contactNo, email , prefType, optin, rank, seatingPreference, status, note, checkinTime, createdTime,  marketingPreference)
VALUES
(P_ORGID, P_GUESTNAME, P_UUID,P_NOOFCHILDREN,P_NOOFADULTS,P_NOOFINFANTS, P_NOOFPEOPLE, P_LANGUAGEPREFID, P_PARTYTYPE, P_DEVICETYPE, P_DEVICEID, P_CONTACTNO, P_EMAIL, P_PREFTYPE, P_OPTIN, V_RANK, P_CSVSEATINGPREF , 'CHECKIN', P_NOTE, now(), now(),  P_CSVMARKETINGPREF);

COMMIT; 

-- Committing the Transaction

-- STORING THE ID
SELECT LAST_INSERT_ID() INTO OP_GUESTID;
SELECT V_RANK INTO OP_GUESTRANK;

-- Call the Procedure to get the header metrics calcualted
CALL `CALCHEADERMETRICS`(P_ORGID, @OP_NOWSERVERINGPARTY, @OP_TOTALWAITINGGUEST, @OP_TOTALWAITTIME , @OP_NOOFPARTIESAHEAD, @OP_GUESTTOBENOTIFIED, @OP_GUESTNOTIFIEDWAITTIME,@OP_PERPARTYWAITTIME, @OP_NOTIFYUSERCOUNT,@OP_CLIENTBASE);


-- Set Return Variables
SELECT @OP_NOWSERVERINGPARTY INTO OP_NOWSERVERINGPARTY;
SELECT @OP_TOTALWAITTIME INTO OP_TOTALWAITTIME;
SELECT @OP_NOOFPARTIESAHEAD INTO OP_NOOFPARTIESAHEAD;
SELECT @OP_GUESTTOBENOTIFIED INTO OP_GUESTTOBENOTIFIED;
SELECT @OP_TOTALWAITINGGUEST INTO OP_TOTALWAITINGGUEST;
SELECT @OP_CLIENTBASE INTO OP_CLIENTBASE;
 
END$$

DELIMITER ;

CREATE TABLE `KyobeeTechRevamp`.`ROLE` (
  `RoleId` INT(11) NOT NULL,
  `RoleName` VARCHAR(100) NULL,
  `Active` TINYINT(1) NULL,
  `CreatedBy` VARCHAR(100) NULL,
  `CreatedAt` DATE NULL,
  `ModifiedBy` VARCHAR(100) NULL,
  `ModifiedAt` DATE NULL,
  PRIMARY KEY (`RoleId`));
  
CREATE TABLE `KyobeeTechRevamp`.`ORGANIZATIONTYPE` (
  `TypeId` INT(11) NOT NULL,
  `TypeName` VARCHAR(100) NULL,
  `Active` TINYINT(1) NULL,
  `CreatedBy` VARCHAR(100) NULL,
  `CreatedAt` DATE NULL,
  `ModifiedBy` VARCHAR(100) NULL,
  `ModifiedAt` DATE NULL,
  PRIMARY KEY (`TypeId`));
  
  
ALTER TABLE `KyobeeTechRevamp`.`USERROLE` 
DROP FOREIGN KEY `FK1RoleID`;
ALTER TABLE `KyobeeTechRevamp`.`USERROLE` 
DROP INDEX `FK1RoleID` ,
ADD INDEX `FK1RoleID_idx` (`RoleID` ASC);
;
ALTER TABLE `KyobeeTechRevamp`.`USERROLE` 
ADD CONSTRAINT `FK1RoleID`
FOREIGN KEY (`RoleID`)
REFERENCES `KyobeeTechRevamp`.`ROLE` (`RoleId`);

CREATE TABLE `KyobeeTechRevamp`.`SMSTEMPLATELANGUAGEMAPPING` (
  `ID` INT NOT NULL,
  `LangId` INT NULL,
  `IsoCode` VARCHAR(10) NULL,
  `level` INT NULL,
  `TemplateText` VARCHAR(250) NULL,
  `Active` TINYINT(1) NULL,
  `CreatedBy` VARCHAR(45) NULL,
  `CreatedAt` DATE NULL,
  `ModifiedBy` VARCHAR(45) NULL,
  `ModifiedAt` DATE NULL,
  PRIMARY KEY (`ID`),
  INDEX `FK01LangID_idx` (`LangId` ASC),
  CONSTRAINT `FK01LangID`
    FOREIGN KEY (`LangId`)
    REFERENCES `KyobeeTechRevamp`.`LANGMASTER` (`LangID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


ALTER TABLE `KyobeeTechRevamp`.`ORGANIZATION` 
DROP FOREIGN KEY `FK2OrganizationTypeID`;
ALTER TABLE `KyobeeTechRevamp`.`ORGANIZATION` 
DROP INDEX `FK2OrganizationTypeID` ,
ADD INDEX `FK2OrganizationTypeID_idx` (`OrganizationTypeID` ASC);
;
ALTER TABLE `KyobeeTechRevamp`.`ORGANIZATION` 
ADD CONSTRAINT `FK2OrganizationTypeID`
  FOREIGN KEY (`OrganizationTypeID`)
  REFERENCES `KyobeeTechRevamp`.`ORGANIZATIONTYPE` (`TypeId`);
  
  ALTER TABLE `KyobeeTechRevamp`.`USER` 
CHANGE COLUMN `UserName` `UserName` VARCHAR(255) NULL ;
  
 



